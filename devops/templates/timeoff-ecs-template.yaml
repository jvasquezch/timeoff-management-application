################################
# Author : Juan Manuel Vasquez 
# Defining VPC Parameters      
################################


#########################
# Defining ECS Parameters     
#########################
Parameters:
  StackName:
    Type: String
    Description: vpc stack name
    Default: "timeoff"
  ClusterName:
    Type: String
    Description: ECS Cluster name
    Default: "timeoff-ecs-cluster"
  ServiceName:
    Type: String
    Description: A human-readable name for the service.
    Default: "timeoff-ecs-service"
  HealthCheckPath:
    Type: String
    Default: /health
    Description: Path to perform the healthcheck on each instance.
  HealthCheckIntervalSeconds:
    Type: Number
    Default: 300
    Description: Number of seconds to wait between each health check.
  ImageUrl:
    Type: String
    Description: The url of a docker image that will handle incoming traffic.
    Default: "941678037348.dkr.ecr.us-east-1.amazonaws.com/timeoff-repository:latest"
  ContainerPort:
    Type: Number
    Default: 3000
    Description: The port number the application inside the docker container 
      is binding to.
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU.
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container.
  Path:
    Type: String
    Default: "*"
    Description: A path on the load balancer that this service
      should be connected to.
  DesiredCount:
    Type: Number
    Default: 4
    Description: How many copies of the service task to run.
  MyIP: 
    Type: String
    Default: "186.177.59.78/32"
  AppUrl:
    Type: String
    Default: "demo.timeoff-solution.com."

Resources:

##################################
# ELB - Application Load Balancer
##################################

  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allowing HTTP and HTTPS 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref "MyIP"
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref "MyIP"
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]
      

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "timeoff-alb"
      Type: "application"
      Scheme: "internet-facing"
      Subnets:
        - Fn::ImportValue:
            !Join [':', [!Ref 'StackName', 'TimeOffPublicSubnetA']]
        - Fn::ImportValue:
            !Join [':', [!Ref 'StackName', 'TimeOffPublicSubnetB']]
      SecurityGroups: 
        - !Ref "ApplicationLoadBalancerSecurityGroup"
      IpAddressType: "ipv4"
      LoadBalancerAttributes:
        -
          Key: "access_logs.s3.enabled"
          Value: "false"
        -
          Key: "idle_timeout.timeout_seconds"
          Value: "60"
        - 
          Key: "deletion_protection.enabled"
          Value: "false"
        -
          Key: "routing.http2.enabled"
          Value: "true"
        -
          Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: "false"

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - "ApplicationLoadBalancer"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: "HTTPS"
      SslPolicy: "ELBSecurityPolicy-2016-08"
      Certificates:
      -
        CertificateArn: arn:aws:acm:us-east-1:941678037348:certificate/ac176169-aa46-4aef-bd3d-d218947a6992
      DefaultActions:
        - 
          Order: 1
          TargetGroupArn: !Ref 'TimeOffECSTargetGroup'
          Type: 'forward'

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - "ApplicationLoadBalancer"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - 
          Order: 2
          TargetGroupArn: !Ref 'TimeOffECSTargetGroup'
          Type: 'forward'

##################################
# TARGET GROUP
##################################

  TimeOffECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: !Ref 'HealthCheckIntervalSeconds'
      HealthCheckPath: !Ref 'HealthCheckPath'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: "timeoff-ecs-targetgroup"
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2 
      Matcher:
        HttpCode: "200,302,303"
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TimeOffECSTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn: !Ref "HTTPSListener"
      Priority: 1

  LoadBalancerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TimeOffECSTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn: !Ref "HTTPListener"
      Priority: 2

##################################
# ECS Cluster Definition
##################################

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref "ClusterName"

  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]

  ECSSecurityGroupIngressFromALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from ALB
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref "ApplicationLoadBalancerSecurityGroup"

  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'
      
##################################
# ECS - ROLES
##################################

# ECS ROLES AND ECS TASK DEFINITION define resources our docker container needs
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

##################################
# ECS - TASK Definition
##################################

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      Family: !Ref 'ServiceName'
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt 'ECSTaskExecutionRole.Arn'
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref ContainerPort

##################################
# ECS - Service
##################################

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster: !Ref "ECSCluster"
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref "FargateContainerSecurityGroup"
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'TimeOffPrivateSubnetA']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'TimeOffPrivateSubnetB']]
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TimeOffECSTargetGroup'


####################################
# Route 53 - Associate domain to ALB
####################################

  TimeOffSolutionDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: timeoff-solution.com.
      Comment: Alias targeted to myELB LoadBalancer
      RecordSets:
      - Name: !Ref "AppUrl"
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt "ApplicationLoadBalancer.CanonicalHostedZoneID"
          DNSName: !GetAtt "ApplicationLoadBalancer.DNSName"